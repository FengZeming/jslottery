{"dependencies":[{"name":"./dom","loc":{"line":3,"column":24}}],"generated":{"js":"'use strict';\n\nlet scrollDom = require('./dom')\n\nfunction extend(destination,source){\n    for (var property in source)\n            destination[property] = source[property];\n    return destination;\n}\n\n//删除一维数据的某一项\nfunction removeArrayValue(arr, val) {\n  for(var i=0; i<arr.length; i++) {\n    if(arr[i] == val) {\n      arr.splice(i, 1);\n      break;\n    }\n  }\n}\n\n/**\n * \n * @param {*dom对象} obj \n * @param {*false:删除class中得active true:添加class中得active} clear \n */\nfunction changeDomActive(obj,clear=false){\n\n    let objClass = obj.getAttribute(\"class\");\n\n    objClass = objClass.split(\" \");\n\n    removeArrayValue(objClass,\"active\");\n\n    if(!clear){ \n        objClass.push(\"active\")\n    }\n\n    objClass = objClass.join(\" \");\n\n    obj.className = objClass;\n\n}\n\nlet domNumber,                      //dom个数\n    Lottery,                        //全局的Lottery对象                     \n    LotteryTimeout = false,         //当前滚动定时器\n    LotteryCircle = 0,              //当前滚动圈数\n    LotteryCircleStep = 0,          //当前滚动总步数\n    LotteryFinish = false,          //判断是否滚动完成\n    LotteryInitSpeed = null,        //记录正常的滚动速度\n    LotteryError = false,           //错误标识\n    LotteryStarted = false;         //开始滚动\n\n\t\nfunction Jslottery(opt = {}){\n    var options = {\n        scrollDom:null,                         //滚动显示的dom  这里是使用class选择器\n        scrollId:null,                          //滚动的dom上的属性号，是用来标记滚动结束获得的id号对应的奖项\n        startPosition:1,                        //开始位置\n        stopPosition:2,                         //停止位置\n        totalCircle:2,                          //滚动的圈数\n        speed:400,                              //正常速度  （这里的速度就是定时器的时间间隔，间隔越短，速度越快）\n        speedUp:100,                            //加速的时候速度\n        speedDown:600,                          //减速的时候速度\n        speedUpPosition:3,                      //加速点 （这里会和滚动的总步数进行比较 理论上总步数 = 总长度 * 总圈数 + stopPosition - startPosition +1 ）\n        speedDownPosition:5,                    //减速点\n        callback:function(type){}               /**\n                                                 * 滚动回调函数   \n\t\t\t\t\t\t\t\t\t\t\t\t *\t   回调类型\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t *\t\t\t\t\ttype==1 : 开始滚动 \n                                                 *                \ttype==2 : 停止滚动\n                                                 *               \ttype==0 : 出现错误\n                                                 *               \ttype==3 : 滚动每个格子的回调\n\t\t\t\t\t\t\t\t\t\t\t\t *     回调内容      data = {}\n                                                 */\n                                                \n    };\n\n    this.version = typeof __VERSION__ == 'undefined' ? opt.version : __VERSION__;\n\n    Lottery = this;\n\n    Lottery.options = extend(options,opt);\n\n    Lottery.init();\n}\n\n/*\n * 初始化Jslottery所需要的基本参数和信息\n */\nJslottery.prototype.init = function () {\n\n    const self = Lottery.options;\n\n    //判断必要的参数\n    if ( self.scrollDom == null || self.scrollId == null ){\n        LotteryError = true;\n        self.callback(0,{\n            msg:\"dom选择器或者dom属性id号不能为空\"\n        });\n    }\n\n    LotteryInitSpeed = self.speed\n\n    const LotteryDom = scrollDom(self.scrollDom,self.scrollId);\n\n    domNumber = LotteryDom.domNumber\n\n    self.scrollDom = LotteryDom.dom\n}\n\n/**\n * 开始滚动\n */\nJslottery.prototype.start = function () {\n\n    const self = Lottery.options;\n\n    //遇到错误  或者 当前已经开始滚动 则 不会进行开始\n    if(LotteryError){\n        return false;\n    }\n\n    if(LotteryCircleStep !=0 ) {\n        self.callback(0,{\n            msg:\"当前正在滚动，请等待滚动停止\"\n        });\n        return false;\n    }\n    \n    Lottery.scroll();\n    \n}\n\nJslottery.prototype.scroll = function () {\n\n    const self = Lottery.options;\n\n    if(!LotteryFinish){\n        //开始滚动\n        LotteryFinish=true;\n        self.callback(1);\n    }\n    \n    if(LotteryTimeout){\n        //恢复初始化参数   \n        LotteryCircle=0;\n        LotteryCircleStep=0;\n        self.speed = LotteryInitSpeed;\n        LotteryTimeout = false;\t\t\t\n        LotteryFinish= false;\n        self.callback(2);\n        return false;\n    }\n\n\n    Lottery.changeNext();\n    setTimeout(Lottery.scroll,self.speed);\n}\n\n/**\n * 加快速度\n */\nJslottery.prototype.speedUp = function () {\n    const self = Lottery.options\n    if(LotteryCircleStep == self.speedUpPosition)\n        self.speed = self.speedUp;\n}\n\n/**\n * 减缓速度\n */\nJslottery.prototype.speedDown = function () {\n    const self = Lottery.options;\n\n    var tmp1 = self.stopPosition-self.speedDownPosition;\n    var tmp2 = self.totalCircle+1;\n    if(tmp1<=0){\n        tmp1 = domNumber + tmp1;\n        tmp2 = tmp2-1;\n    }\n\n    if(self.startPosition==tmp1 && LotteryCircle==tmp2)\n        self.speed = self.speedDown;\n}\n\n/**\n * 滚动的依次改变的效果\n */\nJslottery.prototype.changeNext = function () {\n    var self = Lottery.options;\n\n    LotteryCircleStep++;\n\n    if(self.totalCircle==0 && self.startPosition==self.stopPosition){\n        LotteryTimeout = true\n    }\n    \n    if(self.startPosition==domNumber+1){\n        self.startPosition=1;\n        LotteryCircle++;\n    }\n\n    if(LotteryCircle==self.totalCircle+1 && self.startPosition==self.stopPosition){\n        LotteryTimeout = true;\n    }\n\n    //速度变化\n    Lottery.speedUp();\n\n    Lottery.speedDown();\n\n    //滚动的信息回调\n    self.callback(3,{\n        id:self.startPosition,\n        speed:self.speed,\n        totalStep:LotteryCircleStep\n    });\n\n    //开始实现滚动\n    Lottery.start_scroll();\n}\n\n/**\n * 实现滚动的核心逻辑\n */\nJslottery.prototype.start_scroll = function () {\n    var self = Lottery.options;\n\n    for(var i=1;i<=domNumber;i++){\n\n        if(self.scrollDom[i].getAttribute(self.scrollId)==self.startPosition)\n        {\n            changeDomActive(self.scrollDom[i]);\n  \n            for(var j=1;j<=domNumber;j++){\n                if(self.startPosition==1)\n                {\n                    for(var k=1;k<=domNumber;k++){\n                        if(self.scrollDom[k].getAttribute(self.scrollId)==domNumber){\n                            changeDomActive(self.scrollDom[k],true);\n                        }\n                    }\n                }else if(self.scrollDom[j].getAttribute(self.scrollId)==self.startPosition-1)\n                {\n                    changeDomActive(self.scrollDom[j],true);\n                }\n            }\n\n            self.startPosition++;\n            return false;\n        }\n    }\n}\n\nfunction createJslottery(opt) {\n\treturn new Jslottery(opt);\n}\n\nmodule.exports = createJslottery;"},"hash":"72fa4a796204846625c584d0fa760011"}